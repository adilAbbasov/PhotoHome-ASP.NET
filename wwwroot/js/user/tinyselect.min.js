/*
 * tinySelect ( http://mcfizh.github.io/tinySelect/ )
 *
 * Licensed under MIT license.
 *
 * @version 2.0.1
 * @author Pekka Harjam√§ki
 */
!function (s) { "use strict"; const e = { init: function (t, e) { t.data("tinySelectObj", this), this.config = s.extend({ showSearch: !0, searchCaseSensitive: !0, txtLoading: "Loading...", txtAjaxFailure: "Error...", dataUrl: null, dataParser: null }, e), this.state = { container: null, selectBox: null, itemContainer: null, searchContainer: null, searchBox: null, $el: null, open: !1, ajaxPending: !1, selectedValue: -1, originalItemData: [], filteredItemData: [] }, this.readSelect(t), this.createSelect(t) }, createSelect: function (t) { this.state.container = s("<div></div>").addClass("tinyselect").css({ width: t.css("width") }); var e = t.attr("id"); e && 0 < e.length && this.state.container.attr("id", e + "_ts"), this.state.selectBox = s("<div></div>").addClass("selectbox").on("click", { self: this }, this.onSelectBoxClicked), this.state.container.append(this.state.selectBox), this.state.dropdown = s("<div></div>").addClass("dropdown").hide(), this.state.container.append(this.state.dropdown), this.config.showSearch && this.createSearch(this.state.dropdown), this.state.itemContainer = s("<ul></ul>").addClass("itemcontainer"), this.state.dropdown.append(this.state.itemContainer), this.createItems(), t.hide().after(this.state.container), this.state.$el = t, s(document).on("click", { self: this }, this.onDocumentClicked) }, createItems: function () { this.state.itemContainer.empty(); for (let t = 0; t < this.state.filteredItemData.length; t++) { var e = this.state.filteredItemData[t], a = s("<li></li>").text(e.text).addClass("item").attr("data-value", e.val); e.val === this.state.selectedValue && (this.state.selectBox.html(e.text), a.addClass("selected")), a.on("click", { self: this }, this.onSelectLiClicked), this.state.itemContainer.append(a) } }, createSearch: function () { this.state.searchContainer = s("<div></div>").addClass("searchcontainer"), this.state.searchBox = s("<input type='text'></input>").addClass("searchbox").on("click", function (t) { t.stopPropagation() }).on("keyup", { self: this }, this.onSearchKeyPress), this.state.searchContainer.append(s("<span class='searchicon'></span>")), this.state.searchContainer.append(this.state.searchBox), this.state.dropdown.append(this.state.searchContainer) }, readSelect: function (t) { const e = this; t.find("option").each(function () { var t = s(this); e.state.originalItemData.push({ val: t.val(), text: t.text() }) }), this.state.filteredItemData = this.state.originalItemData, this.state.selectedValue = t.val() }, setAjaxIndicator: function (t) { this.state.ajaxPending = !0, this.state.itemContainer.empty(), null !== this.state.searchContainer && this.state.searchContainer.hide(); var e = s("<li></li>"); t ? e.text(this.config.txtAjaxFailure).addClass("loaderrorindicator") : e.text(this.config.txtLoading).addClass("loadindicator"), this.state.itemContainer.append(e) }, onDocumentClicked: function (t) { var e = t.data.self; e.state.open && e.onSelectBoxClicked(t) }, onSearchKeyPress: function (t) { const e = t.data.self; let a = s(t.currentTarget).val(); 0 === (a = e.config.searchCaseSensitive ? a : a.toLowerCase()).length ? e.state.filteredItemData = e.state.originalItemData : e.state.filteredItemData = e.state.originalItemData.filter(function (t) { return e.config.searchCaseSensitive ? 0 <= t.text.indexOf(a) : 0 <= t.text.toLowerCase().indexOf(a) }), e.createItems() }, onSelectBoxClicked: function (t) { const e = t.data.self; e.state.dropdown.is(":animated") || (e.state.open ? (e.state.open = !1, e.state.selectBox.removeClass("open"), e.state.dropdown.slideUp(100)) : (null !== e.config.dataUrl && (e.setAjaxIndicator(!1), s.ajax({ url: e.config.dataUrl, dataType: "json", type: "GET" }).done(function (t) { e.onAjaxLoadSuccess(e, t) }).fail(function () { e.onAjaxLoadError(e) })), e.state.open = !0, e.state.selectBox.addClass("open"), e.state.dropdown.slideDown(100))) }, onAjaxLoadSuccess: function (e, t) { e.state.ajaxPending = !1, null !== e.config.dataParser && (t = e.config.dataParser(t, e.state.selectedValue)), e.state.$el.empty(), t.forEach(function (t) { t.selected && (e.state.selectedValue = t.val), e.state.$el.append(s("<option></option>").text(t.text).val(t.val)) }), e.state.$el.val(e.state.selectedValue), e.state.originalItemData = t, e.state.filteredItemData = t, null !== this.state.searchContainer && this.state.searchContainer.show(), e.createItems() }, onAjaxLoadError: function (t) { t.setAjaxIndicator(!0) }, onSelectLiClicked: function (t) { var e = t.data.self, t = s(t.currentTarget); e.state.dropdown.find("li").each(function () { s(this).removeClass("selected") }), t.addClass("selected"), e.state.selectBox.html(t.text()), e.state.selectedValue = t.attr("data-value"), e.state.$el.val(e.state.selectedValue), e.state.$el.trigger("change") } }; s.fn.tinyselect = function (t) { return this.each(function () { Object.create(e).init(s(this), t) }) } }(jQuery);